from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os

def getEncryptor(key, nonce):
        # key = os.urandom(32)
        # nonce = os.urandom(16)
        aes_context = Cipher(algorithms.AES(key),
                            modes.CTR(nonce),
                            backend=default_backend())
        encryptor = aes_context.encryptor()
        return encryptor

def getDecryptor(key, nonce):
        # key = os.urandom(32)
        # nonce = os.urandom(16)
        aes_context = Cipher(algorithms.AES(key),
                            modes.CTR(nonce),
                            backend=default_backend())
        decryptor = aes_context.decryptor()
        return decryptor

def updateEncryptor(encryptor, plaintext):
        return encryptor.update(plaintext)

def finalizeEncryptor(encryptor):
        return encryptor.finalize()

def updateDecryptor(decryptor, ciphertext):
        return decryptor.update(ciphertext)

def finalizeDecryptor(decryptor):
        return decryptor.finalize()

        


def encryptMessageAES(message, key):
    plaintexts = []
    plaintexts.append(message) #add message in byte form into plaintext list for clarity
    ciphertexts = [] #place to put in cipher you know
    nonce = os.urandom(16)

    encryptor = getEncryptor(key, nonce)
    decryptor = getDecryptor(key, nonce)
    updateEncryptor(encryptor, plaintexts)
    finalizeEncryptor(encryptor)
    updateDecryptor(decryptor, ciphertexts)
    finalizeDecryptor(decryptor)



    for m in plaintexts:
        ciphertexts.append(updateEncryptor(m))
        ciphertexts.append(finalizeEncryptor())
        print("Encrypted CTR Message:", ciphertexts) 

    for c in ciphertexts:
        print("Recovered", updateDecryptor(c))
        print("Recovered", finalizeDecryptor())



message = b"validationNumber and signature"
key = 12345678901234567890123456789012
encryptMessageAES(message, key)
